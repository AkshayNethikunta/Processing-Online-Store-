Get revenue and cost of items for each orderId

orderItems=sc.textFile("/public/retail_db/order_items")
for i in orderItems.take(10): print(i)

orderItemsMap=orderItems. \
map(lambda oi: (int(oi.split(",")[1]), float(oi.split(",")[5])))

for i in orderItemsMap.take(10): print(i)

revenuePerOrderId=orderItemsMap. \
aggregateByKey((0.0, 0),
lambda x, y: (x[0] + y, x[1] + 1),
lambda x, y: (x[0] + y[0], x[1] + y[1]))

for i in revenuePerOrderId.take(10): print(i)





1)
orderItems=sc.textFile("/public/retail_db/order_items")
orderItemsFilter=orderItems.\
filter(lambda oi: int(oi.split(",")[1])==4)
for i in orderItemsFilter.take(10): print(i)


orderItemsSubtotal=orderItemsFilter. \
map(lambda oi: float(oi.split(",")[4]))
for i in orderItemsSubtotal.take(10): print(i)

from operator import add
orderItemsSubtotal.reduce(add)




2)

orderItems=sc.textFile("/public/retail_db/order_items")  
orderItemsFilter=orderItems.\
filter(lambda oi: int(oi.split(",")[1])==10)
for i in orderItemsFilter.take(10): print(i)







3)
orderItemsMap=orderItems. \
map(lambda oi: (int(oi.split(",")[1]), float(oi.split(",")[5])))





revenuePerOrderId=orderItemsGroupByOrderId. \
map(lambda oi: (oi[0], sum(oi[1])))




orderItems=sc.textFile("/public/retail_db/order_items")
for i in orderItems.take(10): print(i)


orderItemsMap=orderItems. \
map(lambda oi: (int(oi.split(",")[1]), float(oi.split(",")[5])))


revenuePerOrderId=orderItemsMap. \
aggregateByKey((0.0, 0),
lambda x, y: (x[0] + y, x[1] + 1),
lambda x, y: (x[0] + y[0], x[1] + y[1]))











sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--table order_items_nopk \
--warehouse-dir /user/akshaynethikunta/sqoop_import/retail_db \
--autoreset-to-one-mapper


sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--table order_items \
--warehouse-dir /user/akshaynethikunta/sqoop_import/retail_db \
--num-mappers 2 \
--as-sequencefile 

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--target-dir /user/akshaynethikunta/sqoop-import/retail_db/orders_revenue \
--num-mappers 2 \
--query "select o.*,sum(oi.order_item_subtotal) orders_revenue from orders o join order_items oi on o.order_id=oi.order_item_order_id and \$CONDITIONS group by o.order_id,o.order_date,o.order_customer_id,o.order_status" \
--split-by order_id

sqoop import \
--connect jdbc:mysql://ms.itversity.com/hr_db \
--username hr_user \
--password akshayn \
--table employees \
--warehouse-dir /user/akshaynethikunta/sqoop_import/hr_db \
--null-non-string -1 \
--fields-terminated-by "\t" \
--lines-terminated-by ":"

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--table orders \
--hive-import \
--hive-database akshaynethikunta_sqoop_import \
--hive-table orders \
--hive-overwrite \
--num-mappers 2 

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--table order_items \
--hive-import \
--hive-database akshaynethikunta_sqoop_import \
--hive-table order_items\
--num-mappers 2 

sqoop import-all-tables \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--warehouse-dir /user/akshaynethikunta/sqoop_import/retail_db/ \
--autoreset-to-one-mapper

sqoop import \
--connect jdbc:mysql://ms.itversity.com/retail_db \
--username retail_user \
--password akshayn \
--table order_items \
--target-dir /user/akshaynethikunta/sqoop_import/retail_db/order_items



81.sortBYKey
products=sc.textFile("/public/retail_db/products")
for i in products.take(10): print(i)

productsFilter = products. \
filter(lambda p: p.split(",")[4] !="")

for i in productsFilter.take(10): print(i)

productsMap= productsFilter. \
map(lambda p: (float(p.split(",")[4]), p))

for i in productsMap.take(10): print(i)

productsSortByPrice=productsMap.sortByKey()

productsSortedByMap= productsSortByPrice.\
map(lambda p: p[1])

for i in productsSortedByMap.take(10): print(i)


82.composite key using sortByKey
products=sc.textFile("/public/retail_db/products")
for i in products.take(10): print(i)

productsMap= products. \
filter(lambda p: p.split(",")[4]!="").\
map(lambda p: ((int(p.split(",")[1]), -float(p.split(",")[4])), p))

for i in productsMap.sortByKey().take(10): print(i)


83 84  Ranking 

products=sc.textFile("/public/retail_db/products")
for i in products.take(10): print(i)

productsFilter = products. \
filter(lambda p: p.split(",")[4] !="")

for i in productsFilter.take(10): print(i)

productsMap= productsFilter. \
map(lambda p: (float(p.split(",")[4]), p))

for i in productsMap.take(10): print(i)

productsSortByPrice=productsFilter.sortByKey(False)

productsSortedByMap= productsSortByPrice.\
map(lambda p: p[1])

for i in productsSortByPrice.take(10): print(i)


for i in productsSortedByMap.take(10): print(i)



85)top and takeOrdered
products=sc.textFile("/public/retail_db/products")
productsFilter = products. \
filter(lambda p: p.split(",")[4] !="")
topNProducts= productsFilter.top(5,key=lambda p:float(p.split(",")[4]))
for i in topNProducts: print(i)

topNProducts= productsFilter.takeOrdered(5,key=lambda p:float(p.split(",")[4]))
for i in topNProducts: print(i)


86)groupByKey and flatMap

products=sc.textFile("/public/retail_db/products")
productsFilter = products. \
filter(lambda p: p.split(",")[4] !="")
productsMap= productsFilter. \
map(lambda p: (int(p.split(",")[1]), p))
productsGroupByCategoryId=productsMap.groupByKey()
for i in productsGroupByCategoryId.take(10): print(i)

87)
t=productsGroupByCategoryId.first()

l= sorted(t[1], key=lambda p: float(p.split(",")[4]), reverse=True)

88) using flatMap 
same as 86

topNproductsByCategory=productsGroupByCategoryId.\
flatMap(lambda p: sorted(p[1], key=lambda p: float(p.split(",")[4]), reverse=True)[:3])
for i in topNproductsByCategory.take(10): print(i)






t= productsGroupByCategoryId.\
filter(lambda p : p.split(",")[0] ==8)

topNproductsByCategory=productsGroupByCategoryId.\
flatMap(lambda p: sorted(p[1], key=lambda k: float(k.split(",")[4]), reverse=True))

for i in topNproductsByCategory.take(10): print(i)


t= productsGroupByCategoryId.\
filter(lambda p : p[0] ==8).first()


topNproductsByCategory=t.\
flatMap(lambda p: sorted(p[1], key=lambda k: float(k.split(",")[4]), reverse=True))





productsFiltered = productsMap. \
filter(lambda p: p[0] ==8)





akshay=sorted(set(t), reverse=True)[:3]